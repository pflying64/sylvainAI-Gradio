# RAPPORTO TECNICO: SYLVAIN LEVY - ART AND TECHNOLOGIES (v2.01)

## PANORAMICA
Applicazione conversazionale che rappresenta Karen, figlia di Sylvain Levy. Risponde a domande sul lavoro di Sylvain nell'arte e tecnologie digitali mediante interazioni testuali e vocali.

## STRUTTURA DEL PROGETTO
sylvainAI-Gradio/
├── app.py                   # Applicazione principale
├── openai_integration.py    # Gestione OpenAI Assistant
├── elevenlabs_integration.py # Sintesi vocale
├── audio_processing.py      # Elaborazione audio
├── ui_components.py         # Interfaccia grafica
├── img/                     # Risorse grafiche
│   └── background.jpg       # Sfondo applicazione
├── .env                     # Variabili d'ambiente
└── requirements.txt         # Dipendenze

## DIPENDENZE PRINCIPALI
- Python 3.11+
- Gradio 4.0+
- OpenAI API
- ElevenLabs API
- Whisper API (via OpenAI)
- python-dotenv

## DETTAGLIO DEI MODULI

### app.py
Coordina i componenti e gestisce flussi di interazione:
- Inizializza interfaccia Gradio
- Elabora input testuali e vocali
- Coordina richieste API e risposte
- Gestisce stato della conversazione
- Avvia server web

Funzioni principali:
- process_chat(): Elabora messaggi testuali
- process_audio_input(): Elabora input vocali
- clear_chat(): Reimposta la conversazione

### openai_integration.py
Gestisce comunicazione con OpenAI Assistant:
- Crea e gestisce thread di conversazione
- Invia messaggi all'assistente
- Monitora stato delle risposte
- Estrae contenuti testuali

Configurazione:
- ASSISTANT_ID: "asst_9K3X4eTa4PnlUw81smlCeidn"
- API OpenAI con chiave da variabili d'ambiente

### elevenlabs_integration.py
Implementa sintesi vocale con voce personalizzata:
- Invia testo a ElevenLabs API
- Configura parametri vocali personalizzati
- Gestisce risposta a stream di audio
- Salva audio in file temporanei

Parametri vocali:
- Modello: eleven_flash_v2_5
- Stabilità: 0.50
- Somiglianza: 0.75
- Speed: 0.93
- Voice ID: "uG4mxZCQk3xkDZ0N9MUz"

### audio_processing.py
Gestisce trascrizione audio:
- Converte registrazioni vocali in testo
- Comunica con Whisper API
- Gestisce errori di trascrizione

### ui_components.py
Definisce interfaccia utente:
- Stile CSS personalizzato
- Tema scuro con sfondo personalizzato
- Layout centrato con avatar personalizzati
- Funzione custom_chatbot() per visualizzazione messaggi

## FLUSSI DI INTERAZIONE

### Input Testuale -> Risposta
1. Utente invia messaggio testuale
2. app.py richiama process_chat()
3. Messaggio inviato a OpenAI via openai_integration.py
4. Risposta visualizzata nell'interfaccia
5. Se TTS attivo, risposta inviata a ElevenLabs
6. Audio riprodotto nell'interfaccia

### Input Vocale -> Risposta
1. Utente registra messaggio vocale
2. Registrazione inviata a Whisper API via audio_processing.py
3. Trascrizione passata a process_chat()
4. Flusso successivo identico all'input testuale

## CONFIGURAZIONE VARIABILI D'AMBIENTE (.env)
OPENAI_API_KEY=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
ASSISTANT_ID=asst_9K3X4eTa4PnlUw81smlCeidn
ELEVENLABS_API_KEY=sk_0b10a979634f60bec96831a0ae5eca60a1c3d393ace382d8
ELEVENLABS_CUSTOM_VOICE_ID=uG4mxZCQk3xkDZ0N9MUz

## INTERFACCIA UTENTE
- Intestazione con titolo "SYLVAIN LEVY"
- Sottotitolo "Art and Technologies"
- Versione "V α 0.2"
- Area chat con messaggi formattati
- Avatar "U" per utente, "K" per Karen
- Area audio per output vocale
- Tabs per input testuale/vocale
- Checkbox per attivare/disattivare TTS
- Pulsante "Clear" per reimpostare conversazione

## PROBLEMI RISOLTI
1. Integrazione API elevenlabs aggiornata
2. Gestione stream audio vs buffer bytes
3. Caricamento multiplo variabili d'ambiente
4. Gestione corretto thread ID OpenAI
5. Problemi autenticazione API

## INSTALLAZIONE E AVVIO
1. Clonare repository
2. Creare virtualenv: python -m venv venv
3. Attivare: source venv/bin/activate
4. Installare dipendenze: pip install -r requirements.txt
5. Creare file .env con le API keys necessarie
6. Avviare: python app.py

## DEPLOYMENT
Attualmente configurato per esecuzione locale (http://0.0.0.0:7860)
Per deployment web, opzioni:
1. Hugging Face Spaces (soluzione pianificata)
2. Servizi hosting come Render ($7-19/mese)

## LIMITAZIONI ATTUALI
- Registrazione audio richiede click manuale stop
- Branding Gradio/HF se deployato su Spaces
- Banda limitata per sintesi vocale (piano standard ElevenLabs)

## SVILUPPI FUTURI
- Registrazione con rilevamento automatico silenzio
- Miglioramento tempi risposta
- UI con rilevamento lingua user
- Hosting personalizzato senza branding

## CONTATTI
Sviluppato per SYLVAIN LEVY - Art and Technologies, versione α 0.2
Contattare il team tecnico per ulteriori dettagli.